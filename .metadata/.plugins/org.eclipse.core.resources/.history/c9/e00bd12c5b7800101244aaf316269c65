package com.example.scraper.scraperService;

import java.io.IOException;
import java.util.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class ScraperService {

    public static String scrapeTallestBuildings() {
        List<Map<String, String>> buildings = new ArrayList<>();

        try {
            Document doc = Jsoup.connect("https://en.wikipedia.org/wiki/List_of_tallest_buildings")
                                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64)").get();

            Elements rows = doc.select("table.sortable.wikitable tbody tr");

            for (Element row : rows) {
                Elements tds = row.select("td");
                if (tds.size() < 10) continue; // skip rows without enough columns

                String rankText = tds.get(0).text().trim();
                if (!rankText.matches("\\d+")) continue; // skip non-data rows

                Map<String, String> building = new HashMap<>();

                building.put("rank", rankText);

                Element nameAnchor = tds.get(1).selectFirst("a");
                building.put("name", nameAnchor != null ? nameAnchor.text().trim() : tds.get(1).text().trim());

                String heightM = tds.get(2).text().trim();
                building.put("height_m", heightM.split(" ")[0]); // only numeric part

                building.put("height_ft", tds.get(3).text().trim());
                building.put("floors", tds.get(4).text().trim());

                Element img = tds.get(5).selectFirst("img");
                building.put("image_url", img != null ? "https:" + img.attr("src") : "");

                Element cityAnchor = tds.get(6).selectFirst("a");
                building.put("city", cityAnchor != null ? cityAnchor.text().trim() : tds.get(6).text().trim());

                // Country: sometimes flag image + link
                Element countryAnchor = tds.get(7).selectFirst("a");
                building.put("country", countryAnchor != null ? countryAnchor.text().trim() : tds.get(7).text().trim());

                building.put("year", tds.get(8).text().trim());
                building.put("comments", tds.get(9).text().trim());

                buildings.add(building);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(buildings);
    }

  
}
